#!/usr/bin/env bash
CMDNAME=$(basename $0)

usage()
{
    cat << USAGE >&2
Usage:
    ${CMDNAME} host:port [-s] [-t timeout]
    -h HOST | --host=HOST            host or ip to test
    -p PORT | --port=PORT            tcp port under test
    -t TIMEOUT | --timeout=TIMEOUT   timeout in seconds
USAGE
    exit 1
}

wait_for()
{
    if [[ ${TIMEOUT} -gt 0 ]]; then
        echo "${CMDNAME}: waiting ${TIMEOUT} seconds for ${HOST}:${PORT}"
    else
        echo "${CMDNAME}: waiting for ${HOST}:${PORT} without a timeout"
    fi

    START=$(date +%s)

    while :
    do
        (echo > /dev/tcp/${HOST}/${PORT}) >/dev/null 2>&1
        RESULT=$?

        if [[ ${RESULT} -eq 0 ]]; then
            END=$(date +%s)
            echo "${CMDNAME}: ${HOST}:${PORT} is available after $((END - START)) seconds"

            break
        fi

        sleep 1
    done

    return ${RESULT}
}

wait_for_wrapper()
{
    timeout ${BUSYTIMEFLAG} ${TIMEOUT} $0 --child --host=${HOST} --port=${PORT} --timeout=${TIMEOUT} &

    PID=$!
    trap "kill -INT -${PID}" INT
    wait ${PID}
    RESULT=$?

    if [[ ${RESULT} -ne 0 ]]; then
        echo "${CMDNAME}: timeout occurred after waiting ${TIMEOUT} seconds for ${HOST}:${PORT}"
    fi

    return ${RESULT}
}

while [[ $# -gt 0 ]]
do
    case "$1" in
        *:* )
        hostport=(${1//:/ })
        HOST=${hostport[0]}
        PORT=${hostport[1]}
        shift 1
        ;;
        -h)
        HOST="$2"
        if [[ ${HOST} == "" ]]; then break; fi
        shift 2
        ;;
        --host=*)
        HOST="${1#*=}"
        shift 1
        ;;
        -p)
        PORT="$2"
        if [[ ${PORT} == "" ]]; then break; fi
        shift 2
        ;;
        --port=*)
        PORT="${1#*=}"
        shift 1
        ;;
        -t)
        TIMEOUT="$2"
        if [[ ${TIMEOUT} == "" ]]; then break; fi
        shift 2
        ;;
        --timeout=*)
        TIMEOUT="${1#*=}"
        shift 1
        ;;
        --child)
        CHILD=1
        shift 1
        ;;
        --help)
        usage
        ;;
        *)
        echo "unknown argument: $1"
        usage
        ;;
    esac
done

if [[ "${HOST}" == "" || "${PORT}" == "" ]]; then
    echo "error: you need to provide a host and port to test."
    usage
fi

TIMEOUT=${TIMEOUT:-15}
CHILD=${CHILD:-0}

if [[ "$(realpath $(which timeout))" =~ "busybox" ]]; then
    ISBUSY=1
    BUSYTIMEFLAG="-t"
else
    ISBUSY=0
    BUSYTIMEFLAG=""
fi

if [[ ${CHILD} -eq 0 ]]; then
    if [[ ${TIMEOUT} -gt 0 ]]; then
        wait_for_wrapper
        exit $?
    else
        wait_for
        exit $?
    fi
else
    wait_for
    exit $?
fi
